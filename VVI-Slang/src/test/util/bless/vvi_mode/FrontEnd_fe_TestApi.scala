// #Sireum

package bless.vvi_mode

import org.sireum._
import art.{Art, ArtNative, Empty}
import bless._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait FrontEnd_fe_TestApi {

  def BeforeEntrypoint(): Unit = {
    Art.initTest(Arch.PG_i_Instance_fe)
  }

  def AfterEntrypoint(): Unit = {
    Art.finalizeTest(Arch.PG_i_Instance_fe)
  }

  def testCompute(): Unit = {
    Art.manuallyClearOutput()
    Art.testCompute(Arch.PG_i_Instance_fe)
  }

  def testInitialise(): Unit = {
    Art.manuallyClearOutput()
    Art.testInitialise(Arch.PG_i_Instance_fe)
  }

  /** helper function to set the values of all input ports.
   * @param pace the number of events to place in the pace event port queue.
   *   ART currently supports single element event queues so at most
   *   one event will be placed in the queue.
   */
  def put_concrete_inputs(pace : Z): Unit = {
    for(i <- 0 until pace) {
      put_pace()
    }
  }


  /** helper function to check FrontEnd_fe's
   * output ports.  Use named arguments to check subsets of the output ports.
   * @param sense method that will be called with the number of events to be sent
   *        on the outgoing event port 'sense'.
   */
  def check_concrete_output(sense: Z => B): Unit = {
    var testFailures: ISZ[ST] = ISZ()

    // TODO: event port getter should return the number of events in
    //       the output queue when queue sizes > 1 support is added to ART
    val senseValue: Z = if(get_sense().nonEmpty) z"1" else z"0"
    if(!sense(senseValue)) {
      testFailures = testFailures :+ st"'sense' did not match expected: ${senseValue} events were in the outgoing event queue"
    }

    assert(testFailures.isEmpty, st"${(testFailures, "\n")}".render)
  }


  // setter for in EventPort
  def put_pace(): Unit = {
    ArtNative.insertInInfrastructurePort(Arch.PG_i_Instance_fe.operational_api.pace_Id, Empty())
  }

  // getter for out EventPort
  def get_sense(): Option[art.Empty] = {
    val value: Option[art.Empty] = get_sense_payload() match {
      case Some(Empty()) => Some(Empty())
      case Some(v) => halt(s"Unexpected payload on port sense.  Expecting 'Empty' but received ${v}")
      case _ => None[art.Empty]()
    }
    return value
  }

  // payload getter for out EventPort
  def get_sense_payload(): Option[Empty] = {
    return ArtNative.observeOutInfrastructurePort(Arch.PG_i_Instance_fe.initialization_api.sense_Id).asInstanceOf[Option[Empty]]
  }

}
