// #Sireum

package bless.vvi_mode

import org.sireum._
import art._
import bless.SystemTestSuiteSlang.runtimeMonitorStream
import bless._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object RateControl_pp_rc_SystemTestAPI {
  /** helper method to set the values of all incoming ports
    */
  def put_concrete_inputs(): Unit = {
  }



  def fetchContainer(): bless.vvi_mode.RateControl_pp_rc_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.PG_i_Instance_pp_rc.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.PG_i_Instance_pp_rc.id).get
      return postContainer_.asInstanceOf[bless.vvi_mode.RateControl_pp_rc_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.PG_i_Instance_pp_rc.name}")
      halt(s"No post state recorded for ${Arch.PG_i_Instance_pp_rc.name}")
    }
  }

  def check_concrete_outputs(api_lrl: vvi_mode.CardiacDuration,
                             api_vrp: vvi_mode.CardiacDuration): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_lrl = get_api_lrl()
    if (api_lrl != actual_lrl) {
      failureReasons = failureReasons :+ st"'lrl' did not match expected.  Expected: $api_lrl, Actual: $actual_lrl"
    }
    val actual_vrp = get_api_vrp()
    if (api_vrp != actual_vrp) {
      failureReasons = failureReasons :+ st"'vrp' did not match expected.  Expected: $api_vrp, Actual: $actual_vrp"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  def get_api_lrl(): vvi_mode.CardiacDuration = {
    return fetchContainer().api_lrl
  }

  def get_api_vrp(): vvi_mode.CardiacDuration = {
    return fetchContainer().api_vrp
  }
}