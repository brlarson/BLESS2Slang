// #Sireum

package bless.vvi_mode

import org.sireum._
import art._
import bless.SystemTestSuiteSlang.runtimeMonitorStream
import bless._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object VVI_i_pp_t_SystemTestAPI {
  /** helper method to set the values of all incoming ports
    * @param api_h incoming event port
    * @param api_s incoming event port
    * @param api_lrl incoming data port
    * @param api_vrp incoming data port
    */
  def put_concrete_inputs(api_h: Option[art.Empty],
                          api_s: Option[art.Empty],
                          api_lrl: vvi_mode.CardiacDuration,
                          api_vrp: vvi_mode.CardiacDuration): Unit = {
    put_h(api_h)
    put_s(api_s)
    put_lrl(api_lrl)
    put_vrp(api_vrp)
  }

  // setter for incoming event  port
  def put_h(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.PG_i_Instance_pp_t.operational_api.h_Id, v)
      case _ =>
    }
  }

  // setter for incoming event  port
  def put_s(value: Option[art.Empty]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.PG_i_Instance_pp_t.operational_api.s_Id, v)
      case _ =>
    }
  }

  // setter for incoming data port
  def put_lrl(value: vvi_mode.CardiacDuration): Unit = {
    Art.insertInInfrastructurePort(Arch.PG_i_Instance_pp_t.operational_api.lrl_Id, vvi_mode.CardiacDuration_Payload(value))
  }

  // setter for incoming data port
  def put_vrp(value: vvi_mode.CardiacDuration): Unit = {
    Art.insertInInfrastructurePort(Arch.PG_i_Instance_pp_t.operational_api.vrp_Id, vvi_mode.CardiacDuration_Payload(value))
  }

  def fetchContainer(): bless.vvi_mode.VVI_i_pp_t_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.PG_i_Instance_pp_t.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.PG_i_Instance_pp_t.id).get
      return postContainer_.asInstanceOf[bless.vvi_mode.VVI_i_pp_t_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.PG_i_Instance_pp_t.name}")
      halt(s"No post state recorded for ${Arch.PG_i_Instance_pp_t.name}")
    }
  }

  def check_concrete_outputs(api_n: Option[art.Empty],
                             api_p: Option[art.Empty]): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_n = get_api_n()
    if (api_n != actual_n) {
      failureReasons = failureReasons :+ st"'n' did not match expected.  Expected: $api_n, Actual: $actual_n"
    }
    val actual_p = get_api_p()
    if (api_p != actual_p) {
      failureReasons = failureReasons :+ st"'p' did not match expected.  Expected: $api_p, Actual: $actual_p"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  def get_api_n(): Option[art.Empty] = {
    return fetchContainer().api_n
  }

  def get_api_p(): Option[art.Empty] = {
    return fetchContainer().api_p
  }
}