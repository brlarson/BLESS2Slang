// #Sireum

package bless.vvi_mode

import org.sireum._
import art._
import bless._
import bless.vvi_mode.{RateControl_pp_rc => component}
import org.sireum.S64._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

@datatype class RateControl_pp_rc_Bridge(
  val id: Art.BridgeId,
  val name: String,
  val dispatchProtocol: DispatchPropertyProtocol,
  val dispatchTriggers: Option[ISZ[Art.PortId]],

  lrl: Port[vvi_mode.CardiacDuration],
  vrp: Port[vvi_mode.CardiacDuration]
  ) extends Bridge {

  val ports : Bridge.Ports = Bridge.Ports(
    dataIns = ISZ[art.UPort](),

    dataOuts = ISZ[art.UPort](lrl,
                              vrp),

    eventIns = ISZ[art.UPort](),

    eventOuts = ISZ[art.UPort]()
  )

  val initialization_api : RateControl_Initialization_Api = {
    val api = RateControl_Initialization_Api(
      id,
      lrl.id,
      vrp.id
    )
    RateControl_pp_rc_Bridge.c_initialization_api = Some(api)
    api
  }

  val operational_api : RateControl_Operational_Api = {
    val api = RateControl_Operational_Api(
      id,
      lrl.id,
      vrp.id
    )
    RateControl_pp_rc_Bridge.c_operational_api = Some(api)
    api
  }

  val entryPoints : Bridge.EntryPoints =
    RateControl_pp_rc_Bridge.EntryPoints(
      id,

      lrl.id,
      vrp.id,

      dispatchTriggers,

      initialization_api,
      operational_api)
}

object RateControl_pp_rc_Bridge {

  var c_initialization_api: Option[RateControl_Initialization_Api] = None()
  var c_operational_api: Option[RateControl_Operational_Api] = None()
  // I'm a companion object block

  def contains(isz : ISZ[Art.PortId], elt : Art.PortId) : B =
    { for ( i <- isz )
      { if (i == elt) { return T } }
    return F
    }

  var event_set : Set[Art.PortId] = Set.empty[Art.PortId]

  var timeout_id : Art.PortId = Art.PortId.fromZ(Art.numPorts - 3)





  @datatype class EntryPoints(
    RateControl_pp_rc_BridgeId : Art.BridgeId,
    lrl_Id : Art.PortId,
    vrp_Id : Art.PortId,
    dispatchTriggers : Option[ISZ[Art.PortId]],
    initialization_api: RateControl_Initialization_Api,
    operational_api: RateControl_Operational_Api) extends Bridge.EntryPoints {

    val dataInPortIds: ISZ[Art.PortId] = IS()

    val eventInPortIds: ISZ[Art.PortId] = IS()

    val dataOutPortIds: ISZ[Art.PortId] = IS(lrl_Id,
                                             vrp_Id)

    val eventOutPortIds: ISZ[Art.PortId] = IS()



    def initialise(): Unit = {
      // i'm an initialize body
        initialization_api.logDebug("RateControl_pp_rc_Bridge.initialise()")  
        component.Initialize_Entrypoint(initialization_api)
        Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def compute(): Unit = {
      // i'm a compute body for periodic thread
        Art.receiveInput(eventInPortIds, dataInPortIds)
        component.Compute_Entrypoint(operational_api)
        Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def finalise(): Unit = {
      // i'm a finalize body
      Art.receiveInput(eventInPortIds, dataInPortIds)
      component.Finalize_Entrypoint(operational_api)
    }

    override
    def testInitialise(): Unit = {
      // i'm an initialize body
        initialization_api.logDebug("RateControl_pp_rc_Bridge.initialise()")  
        component.Initialize_Entrypoint(initialization_api)
        Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    override
    def testCompute(): Unit = {
      // i'm a compute body for periodic thread
        Art.receiveInput(eventInPortIds, dataInPortIds)
        component.Compute_Entrypoint(operational_api)
        Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }
  }
}