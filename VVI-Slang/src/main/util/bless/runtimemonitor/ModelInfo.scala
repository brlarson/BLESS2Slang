// #Sireum
package bless.runtimemonitor

import org.sireum._
import bless._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object ModelInfo {
  val VVI_i_pp_t_MI : Component =
    Component(
      name = "VVI_i_pp_t",
      id = Arch.PG_i_Instance_pp_t.id.toZ,
      dispatchProtocol = iDispatchProtocol.Sporadic,
      state = ISZ(
        Port(
          name = "lrl",
          id = Arch.PG_i_Instance_pp_t.lrl.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "vrp",
          id = Arch.PG_i_Instance_pp_t.vrp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "s",
          id = Arch.PG_i_Instance_pp_t.s.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "p",
          id = Arch.PG_i_Instance_pp_t.p.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "n",
          id = Arch.PG_i_Instance_pp_t.n.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "h",
          id = Arch.PG_i_Instance_pp_t.h.id.toZ,
          kind = PortKind.Event,
          direction = StateDirection.In,
          slangType = "")))

  val RateControl_pp_rc_MI : Component =
    Component(
      name = "RateControl_pp_rc",
      id = Arch.PG_i_Instance_pp_rc.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "lrl",
          id = Arch.PG_i_Instance_pp_rc.lrl.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "vrp",
          id = Arch.PG_i_Instance_pp_rc.vrp.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val modelInfo: ModelInfo =
    ModelInfo(ISZ(
     VVI_i_pp_t_MI,
     RateControl_pp_rc_MI))
}

@datatype class ModelInfo(val components: ISZ[Component])

@datatype class Component(val name: String,
                          val id: Z,
                          val dispatchProtocol: iDispatchProtocol.Type,
                          val state: ISZ[StateElement])

@enum object iDispatchProtocol {
  "Sporadic"
  "Periodic"
}

@enum object StateDirection {
  "In"
  "Out"
}

@sig trait StateElement {
  def name: String

  def id: Z

  def slangType: String

  def direction: StateDirection.Type
}

@enum object PortKind {
  "Data"
  "Event"
  "EventData"
}

@datatype class Port(val name: String,
                     val id: Z,
                     val kind: PortKind.Type,
                     val direction: StateDirection.Type,
                     val slangType: String) extends StateElement

@datatype class StateVariable(val name: String,
                              val id: Z,
                              val direction: StateDirection.Type,
                              val slangType: String) extends StateElement
