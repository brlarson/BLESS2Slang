// #Sireum

// generated by BLESS v3.2.4 at Fri Mar 15 16:09:26 CDT 2024 from vvi_mode::RateControl

package bless.vvi_mode

import org.sireum._
import org.sireum.S64._  //type for native time (in ms) and integers
import org.sireum.F64._  //type for quantities
import art.Art           // for .time() timestamp
import bless._
// import types created for data components
import bless.vvi_mode.CardiacDuration

object RateControl_pp_rc 
  {
  @enum object CompleteStates 
    {
    "start_state" //initial state
    "run_state" 
    }
  //  execution states: [none]
  //  final states: [none]

  var currentState: CompleteStates.Type = CompleteStates.start_state

  // no local variables
  var dispatch_status: Set[art.Art.PortId] = Set.empty  //local copy of Dispatch_Status

  def Initialize_Entrypoint(api: RateControl_Initialization_Api): Unit = 
    {
    api.logDebug("executing Initialize_Entrypoint of RateControl_pp_rc")
    if ( true )
      { do_go_start(api) }
    //  set durations of timeouts in Bridge
    }  //end of Initialize_Entrypoint

  def Compute_Entrypoint(api: RateControl_Operational_Api): B = 
    {
    dispatch_status = Dispatch_Status  // save local copy of dispatch status
    api.logDebug("executing Compute_Entrypoint of RateControl_pp_rc")
    api.logDebug(s"Dispatch_Status = ${dispatch_status.elements}")
    api.logDebug(s"current complete state = ${currentState}")
    var retval : B = F
    currentState match
      {
      case RateControl_pp_rc.CompleteStates.start_state =>
        if ( true )
          { //initial state case needed for complete match
            retval = T }
      case RateControl_pp_rc.CompleteStates.run_state =>

      }
    return retval
    }  //end of Compute_Entrypoint

  def Finalize_Entrypoint(api: RateControl_Operational_Api): Unit = 
    {
    }  //end of Finalize_Entrypoint

  // methods for transitions leaving initial state  
  def do_go_start(api: RateControl_Initialization_Api): Unit = 
    {
    api.logDebug("executing go")

    api.put_lrl(CardiacDuration(f64"1000.0"))
    api.put_vrp(CardiacDuration(f64"150.0"))
    //set currentState to destination complete state run
    currentState = RateControl_pp_rc.CompleteStates.run_state
    }  //end of do_go_start

  // methods for transitions leaving complete states  

  // methods for execution states

  def contains(isz : ISZ[Art.PortId], elt : Art.PortId) : B =
    { for ( i <- isz )
      { if (i == elt) { return T } }
    return F
    }
  }

