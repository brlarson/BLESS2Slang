// #Sireum

package bless.rc

import org.sireum._
import art._
import bless._
import bless.rc.{RateController_normal_pgp_rc => component}
import org.sireum.S64._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

@datatype class RateController_normal_pgp_rc_Bridge(
  val id: Art.BridgeId,
  val name: String,
  val dispatchProtocol: DispatchPropertyProtocol,
  val dispatchTriggers: Option[ISZ[Art.PortId]],

  min_cci: Port[PACE_Data.ms],
  max_cci: Port[PACE_Data.ms],
  atr_max_cci: Port[PACE_Data.ms],
  dav: Port[PACE_Data.ms],
  xl: Port[PACE_Data.milliG],
  mag: Port[BLESS_Types.flag],
  last_v_was_vs: Port[BLESS_Types.flag],
  rr: Port[BLESS_Types.flag],
  rf: Port[PACE_Data.rf],
  rt: Port[PACE_Data.second],
  at: Port[PACE_Data.milliG],
  ct: Port[PACE_Data.second],
  lrl: Port[PACE_Data.ms],
  url: Port[PACE_Data.ms],
  msr: Port[PACE_Data.ms],
  av: Port[PACE_Data.ms],
  min_av: Port[PACE_Data.ms],
  drs: Port[PACE_Data.percent],
  urs: Port[PACE_Data.percent],
  fb_time: Port[PACE_Data.second],
  hy: Port[PACE_Data.ms],
  cci: Port[PACE_Data.ms]
  ) extends Bridge {

  val ports : Bridge.Ports = Bridge.Ports(
    dataIns = ISZ[art.UPort](xl,
                             mag,
                             last_v_was_vs,
                             rr,
                             rf,
                             rt,
                             at,
                             ct,
                             lrl,
                             url,
                             msr,
                             av,
                             min_av,
                             drs,
                             urs,
                             fb_time,
                             hy),

    dataOuts = ISZ[art.UPort](min_cci,
                              max_cci,
                              atr_max_cci,
                              dav),

    eventIns = ISZ[art.UPort](cci),

    eventOuts = ISZ[art.UPort]()
  )

  val initialization_api : RateController_normal_Initialization_Api = {
    val api = RateController_normal_Initialization_Api(
      id,
      min_cci.id,
      max_cci.id,
      atr_max_cci.id,
      dav.id,
      xl.id,
      mag.id,
      last_v_was_vs.id,
      rr.id,
      rf.id,
      rt.id,
      at.id,
      ct.id,
      lrl.id,
      url.id,
      msr.id,
      av.id,
      min_av.id,
      drs.id,
      urs.id,
      fb_time.id,
      hy.id,
      cci.id
    )
    RateController_normal_pgp_rc_Bridge.c_initialization_api = Some(api)
    api
  }

  val operational_api : RateController_normal_Operational_Api = {
    val api = RateController_normal_Operational_Api(
      id,
      min_cci.id,
      max_cci.id,
      atr_max_cci.id,
      dav.id,
      xl.id,
      mag.id,
      last_v_was_vs.id,
      rr.id,
      rf.id,
      rt.id,
      at.id,
      ct.id,
      lrl.id,
      url.id,
      msr.id,
      av.id,
      min_av.id,
      drs.id,
      urs.id,
      fb_time.id,
      hy.id,
      cci.id
    )
    RateController_normal_pgp_rc_Bridge.c_operational_api = Some(api)
    api
  }

  val entryPoints : Bridge.EntryPoints =
    RateController_normal_pgp_rc_Bridge.EntryPoints(
      id,

      min_cci.id,
      max_cci.id,
      atr_max_cci.id,
      dav.id,
      xl.id,
      mag.id,
      last_v_was_vs.id,
      rr.id,
      rf.id,
      rt.id,
      at.id,
      ct.id,
      lrl.id,
      url.id,
      msr.id,
      av.id,
      min_av.id,
      drs.id,
      urs.id,
      fb_time.id,
      hy.id,
      cci.id,

      dispatchTriggers,

      initialization_api,
      operational_api)
}

object RateController_normal_pgp_rc_Bridge {

  var c_initialization_api: Option[RateController_normal_Initialization_Api] = None()
  var c_operational_api: Option[RateController_normal_Operational_Api] = None()
  // I'm a companion object block

  def contains(isz : ISZ[Art.PortId], elt : Art.PortId) : B =
    { for ( i <- isz )
      { if (i == elt) { return T } }
    return F
    }

  var event_set : Set[Art.PortId] = Set.empty[Art.PortId]

  var timeout_id : Art.PortId = Art.PortId.fromZ(Art.numPorts - 4)





  @datatype class EntryPoints(
    RateController_normal_pgp_rc_BridgeId : Art.BridgeId,
    min_cci_Id : Art.PortId,
    max_cci_Id : Art.PortId,
    atr_max_cci_Id : Art.PortId,
    dav_Id : Art.PortId,
    xl_Id : Art.PortId,
    mag_Id : Art.PortId,
    last_v_was_vs_Id : Art.PortId,
    rr_Id : Art.PortId,
    rf_Id : Art.PortId,
    rt_Id : Art.PortId,
    at_Id : Art.PortId,
    ct_Id : Art.PortId,
    lrl_Id : Art.PortId,
    url_Id : Art.PortId,
    msr_Id : Art.PortId,
    av_Id : Art.PortId,
    min_av_Id : Art.PortId,
    drs_Id : Art.PortId,
    urs_Id : Art.PortId,
    fb_time_Id : Art.PortId,
    hy_Id : Art.PortId,
    cci_Id : Art.PortId,
    dispatchTriggers : Option[ISZ[Art.PortId]],
    initialization_api: RateController_normal_Initialization_Api,
    operational_api: RateController_normal_Operational_Api) extends Bridge.EntryPoints {

    val dataInPortIds: ISZ[Art.PortId] = IS(xl_Id,
                                            mag_Id,
                                            last_v_was_vs_Id,
                                            rr_Id,
                                            rf_Id,
                                            rt_Id,
                                            at_Id,
                                            ct_Id,
                                            lrl_Id,
                                            url_Id,
                                            msr_Id,
                                            av_Id,
                                            min_av_Id,
                                            drs_Id,
                                            urs_Id,
                                            fb_time_Id,
                                            hy_Id)

    val eventInPortIds: ISZ[Art.PortId] = IS(cci_Id)

    val dataOutPortIds: ISZ[Art.PortId] = IS(min_cci_Id,
                                             max_cci_Id,
                                             atr_max_cci_Id,
                                             dav_Id)

    val eventOutPortIds: ISZ[Art.PortId] = IS()



    def initialise(): Unit = {
      // i'm an initialize body
        initialization_api.logDebug("RateController_normal_pgp_rc_Bridge.initialise()")  
        component.Initialize_Entrypoint(initialization_api)
        Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def compute(): Unit = {
      // i'm a compute body
        operational_api.logDebug("RateController_normal_pgp_rc_Bridge.compute()")  
        val EventTriggered(receivedEvents) = Art.dispatchStatus(RateController_normal_pgp_rc_BridgeId)
        event_set = event_set ++ receivedEvents  
        Art.receiveInput(eventInPortIds, dataInPortIds)
        val dispatched : B = { component.Compute_Entrypoint(operational_api, event_set) }
        if (dispatched) { event_set = Set.empty[Art.PortId] }
        Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def activate(): Unit = {
      // i'm an activate body
    }

    def deactivate(): Unit = {
      // i'm a deactivate body
    }

    def finalise(): Unit = {
      // i'm a finalize body
      Art.receiveInput(eventInPortIds, dataInPortIds)
      component.Finalize_Entrypoint(operational_api)
    }

    def recover(): Unit = {
      // i'm a recover body
    }

    override
    def testInitialise(): Unit = {
      // i'm an initialize body
        initialization_api.logDebug("RateController_normal_pgp_rc_Bridge.initialise()")  
        component.Initialize_Entrypoint(initialization_api)
        Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    override
    def testCompute(): Unit = {
      // i'm a compute body
        operational_api.logDebug("RateController_normal_pgp_rc_Bridge.compute()")  
        val EventTriggered(receivedEvents) = Art.dispatchStatus(RateController_normal_pgp_rc_BridgeId)
        event_set = event_set ++ receivedEvents  
        Art.receiveInput(eventInPortIds, dataInPortIds)
        val dispatched : B = { component.Compute_Entrypoint(operational_api, event_set) }
        if (dispatched) { event_set = Set.empty[Art.PortId] }
        Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }
  }
}