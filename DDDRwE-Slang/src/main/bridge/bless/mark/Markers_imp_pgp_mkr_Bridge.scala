// #Sireum

package bless.mark

import org.sireum._
import art._
import bless._
import bless.mark.{Markers_imp_pgp_mkr => component}

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

@datatype class Markers_imp_pgp_mkr_Bridge(
  val id: Art.BridgeId,
  val name: String,
  val dispatchProtocol: DispatchPropertyProtocol,
  val dispatchTriggers: Option[ISZ[Art.PortId]],

  tna: Port[BLESS_Types.flag],
  tnv: Port[BLESS_Types.flag],
  cci: Port[PACE_Data.ms],
  mark_A: Port[mark.AtrialMarker],
  mark_V: Port[mark.VentricularlMarker],
  mark_X: Port[mark.ExtraordinaryMarker],
  atr_dct: Port[BLESS_Types.flag],
  atr_end: Port[BLESS_Types.flag],
  ap: Port[art.Empty],
  vp: Port[art.Empty],
  as: Port[art.Empty],
  at: Port[art.Empty],
  vs: Port[art.Empty],
  pvc: Port[art.Empty],
  ras: Port[art.Empty],
  rvs: Port[art.Empty],
  atr_fb: Port[art.Empty]
  ) extends Bridge {

  val ports : Bridge.Ports = Bridge.Ports(
    dataIns = ISZ[art.UPort](tna,
                             tnv,
                             cci),

    dataOuts = ISZ[art.UPort](),

    eventIns = ISZ[art.UPort](atr_dct,
                              atr_end,
                              ap,
                              vp,
                              as,
                              at,
                              vs,
                              pvc,
                              ras,
                              rvs,
                              atr_fb),

    eventOuts = ISZ[art.UPort](mark_A,
                               mark_V,
                               mark_X)
  )

  val initialization_api : Markers_imp_Initialization_Api = {
    val api = Markers_imp_Initialization_Api(
      id,
      tna.id,
      tnv.id,
      cci.id,
      mark_A.id,
      mark_V.id,
      mark_X.id,
      atr_dct.id,
      atr_end.id,
      ap.id,
      vp.id,
      as.id,
      at.id,
      vs.id,
      pvc.id,
      ras.id,
      rvs.id,
      atr_fb.id
    )
    Markers_imp_pgp_mkr_Bridge.c_initialization_api = Some(api)
    api
  }

  val operational_api : Markers_imp_Operational_Api = {
    val api = Markers_imp_Operational_Api(
      id,
      tna.id,
      tnv.id,
      cci.id,
      mark_A.id,
      mark_V.id,
      mark_X.id,
      atr_dct.id,
      atr_end.id,
      ap.id,
      vp.id,
      as.id,
      at.id,
      vs.id,
      pvc.id,
      ras.id,
      rvs.id,
      atr_fb.id
    )
    Markers_imp_pgp_mkr_Bridge.c_operational_api = Some(api)
    api
  }

  val entryPoints : Bridge.EntryPoints =
    Markers_imp_pgp_mkr_Bridge.EntryPoints(
      id,

      tna.id,
      tnv.id,
      cci.id,
      mark_A.id,
      mark_V.id,
      mark_X.id,
      atr_dct.id,
      atr_end.id,
      ap.id,
      vp.id,
      as.id,
      at.id,
      vs.id,
      pvc.id,
      ras.id,
      rvs.id,
      atr_fb.id,

      dispatchTriggers,

      initialization_api,
      operational_api)
}

object Markers_imp_pgp_mkr_Bridge {

  var c_initialization_api: Option[Markers_imp_Initialization_Api] = None()
  var c_operational_api: Option[Markers_imp_Operational_Api] = None()

  @datatype class EntryPoints(
    Markers_imp_pgp_mkr_BridgeId : Art.BridgeId,
    tna_Id : Art.PortId,
    tnv_Id : Art.PortId,
    cci_Id : Art.PortId,
    mark_A_Id : Art.PortId,
    mark_V_Id : Art.PortId,
    mark_X_Id : Art.PortId,
    atr_dct_Id : Art.PortId,
    atr_end_Id : Art.PortId,
    ap_Id : Art.PortId,
    vp_Id : Art.PortId,
    as_Id : Art.PortId,
    at_Id : Art.PortId,
    vs_Id : Art.PortId,
    pvc_Id : Art.PortId,
    ras_Id : Art.PortId,
    rvs_Id : Art.PortId,
    atr_fb_Id : Art.PortId,
    dispatchTriggers : Option[ISZ[Art.PortId]],
    initialization_api: Markers_imp_Initialization_Api,
    operational_api: Markers_imp_Operational_Api) extends Bridge.EntryPoints {

    val dataInPortIds: ISZ[Art.PortId] = IS(tna_Id,
                                            tnv_Id,
                                            cci_Id)

    val eventInPortIds: ISZ[Art.PortId] = IS(atr_dct_Id,
                                             atr_end_Id,
                                             ap_Id,
                                             vp_Id,
                                             as_Id,
                                             at_Id,
                                             vs_Id,
                                             pvc_Id,
                                             ras_Id,
                                             rvs_Id,
                                             atr_fb_Id)

    val dataOutPortIds: ISZ[Art.PortId] = IS()

    val eventOutPortIds: ISZ[Art.PortId] = IS(mark_A_Id,
                                              mark_V_Id,
                                              mark_X_Id)

    def initialise(): Unit = {
      // implement the following method in 'component':  def initialise(api: Markers_imp_Initialization_Api): Unit = {}
      component.initialise(initialization_api)
      Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def compute(): Unit = {
      // transpiler friendly filter
      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {
        var r = ISZ[Art.PortId]()
        val opsTriggers = ops.ISZOps(triggers)
        for(e <- receivedEvents) {
          if(opsTriggers.contains(e)) {
            r = r :+ e
          }
        }
        return r
      }

      // fetch received events ordered by highest urgency then earliest arrival-time
      val EventTriggered(receivedEvents) = Art.dispatchStatus(Markers_imp_pgp_mkr_BridgeId)

      // remove non-dispatching event ports
      val dispatchableEventPorts: ISZ[Art.PortId] =
        if(dispatchTriggers.isEmpty) receivedEvents
        else filter(receivedEvents, dispatchTriggers.get)

      Art.receiveInput(eventInPortIds, dataInPortIds)

      for(portId <- dispatchableEventPorts) {
        if(portId == atr_dct_Id){
          val Some(BLESS_Types.flag_Payload(value)) = Art.getValue(atr_dct_Id)

          // implement the following in 'component':  def handle_atr_dct(api: Markers_imp_Operational_Api, value: BLESS_Types.flag): Unit = {}
          component.handle_atr_dct(operational_api, value)
        }
        else if(portId == atr_end_Id){
          val Some(BLESS_Types.flag_Payload(value)) = Art.getValue(atr_end_Id)

          // implement the following in 'component':  def handle_atr_end(api: Markers_imp_Operational_Api, value: BLESS_Types.flag): Unit = {}
          component.handle_atr_end(operational_api, value)
        }
        else if(portId == ap_Id) {
          // implement the following in 'component':  def handle_ap(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_ap(operational_api)
        }
        else if(portId == vp_Id) {
          // implement the following in 'component':  def handle_vp(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_vp(operational_api)
        }
        else if(portId == as_Id) {
          // implement the following in 'component':  def handle_as(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_as(operational_api)
        }
        else if(portId == at_Id) {
          // implement the following in 'component':  def handle_at(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_at(operational_api)
        }
        else if(portId == vs_Id) {
          // implement the following in 'component':  def handle_vs(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_vs(operational_api)
        }
        else if(portId == pvc_Id) {
          // implement the following in 'component':  def handle_pvc(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_pvc(operational_api)
        }
        else if(portId == ras_Id) {
          // implement the following in 'component':  def handle_ras(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_ras(operational_api)
        }
        else if(portId == rvs_Id) {
          // implement the following in 'component':  def handle_rvs(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_rvs(operational_api)
        }
        else if(portId == atr_fb_Id) {
          // implement the following in 'component':  def handle_atr_fb(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_atr_fb(operational_api)
        }
      }

      Art.sendOutput(eventOutPortIds, dataOutPortIds)
    }

    def activate(): Unit = {
      // implement the following method in 'component':  def activate(api: Markers_imp_Operational_Api): Unit = {}
      component.activate(operational_api)
    }

    def deactivate(): Unit = {
      // implement the following method in 'component':  def deactivate(api: Markers_imp_Operational_Api): Unit = {}
      component.deactivate(operational_api)
    }

    def finalise(): Unit = {
      // implement the following method in 'component':  def finalise(api: Markers_imp_Operational_Api): Unit = {}
      component.finalise(operational_api)
    }

    def recover(): Unit = {
      // implement the following method in 'component':  def recover(api: Markers_imp_Operational_Api): Unit = {}
      component.recover(operational_api)
    }

    override
    def testInitialise(): Unit = {
      // implement the following method in 'component':  def initialise(api: Markers_imp_Initialization_Api): Unit = {}
      component.initialise(initialization_api)
      Art.releaseOutput(eventOutPortIds, dataOutPortIds)
    }

    override
    def testCompute(): Unit = {
      // transpiler friendly filter
      def filter(receivedEvents: ISZ[Art.PortId], triggers: ISZ[Art.PortId]): ISZ[Art.PortId] = {
        var r = ISZ[Art.PortId]()
        val opsTriggers = ops.ISZOps(triggers)
        for(e <- receivedEvents) {
          if(opsTriggers.contains(e)) {
            r = r :+ e
          }
        }
        return r
      }

      // fetch received events ordered by highest urgency then earliest arrival-time
      val EventTriggered(receivedEvents) = Art.dispatchStatus(Markers_imp_pgp_mkr_BridgeId)

      // remove non-dispatching event ports
      val dispatchableEventPorts: ISZ[Art.PortId] =
        if(dispatchTriggers.isEmpty) receivedEvents
        else filter(receivedEvents, dispatchTriggers.get)

      Art.receiveInput(eventInPortIds, dataInPortIds)

      for(portId <- dispatchableEventPorts) {
        if(portId == atr_dct_Id){
          val Some(BLESS_Types.flag_Payload(value)) = Art.getValue(atr_dct_Id)

          // implement the following in 'component':  def handle_atr_dct(api: Markers_imp_Operational_Api, value: BLESS_Types.flag): Unit = {}
          component.handle_atr_dct(operational_api, value)
        }
        else if(portId == atr_end_Id){
          val Some(BLESS_Types.flag_Payload(value)) = Art.getValue(atr_end_Id)

          // implement the following in 'component':  def handle_atr_end(api: Markers_imp_Operational_Api, value: BLESS_Types.flag): Unit = {}
          component.handle_atr_end(operational_api, value)
        }
        else if(portId == ap_Id) {
          // implement the following in 'component':  def handle_ap(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_ap(operational_api)
        }
        else if(portId == vp_Id) {
          // implement the following in 'component':  def handle_vp(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_vp(operational_api)
        }
        else if(portId == as_Id) {
          // implement the following in 'component':  def handle_as(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_as(operational_api)
        }
        else if(portId == at_Id) {
          // implement the following in 'component':  def handle_at(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_at(operational_api)
        }
        else if(portId == vs_Id) {
          // implement the following in 'component':  def handle_vs(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_vs(operational_api)
        }
        else if(portId == pvc_Id) {
          // implement the following in 'component':  def handle_pvc(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_pvc(operational_api)
        }
        else if(portId == ras_Id) {
          // implement the following in 'component':  def handle_ras(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_ras(operational_api)
        }
        else if(portId == rvs_Id) {
          // implement the following in 'component':  def handle_rvs(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_rvs(operational_api)
        }
        else if(portId == atr_fb_Id) {
          // implement the following in 'component':  def handle_atr_fb(api: Markers_imp_Operational_Api): Unit = {}
          component.handle_atr_fb(operational_api)
        }
      }

      Art.releaseOutput(eventOutPortIds, dataOutPortIds)
    }
  }
}