// #Sireum

package bless

import org.sireum._
import art._
import art.PortMode._
import art.DispatchPropertyProtocol._
import art.Art.BridgeId._
import art.Art.PortId._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Arch {
  val PG_imp_Instance_pgp_ddd : bless.sw.pacer_imp_pgp_ddd_Bridge = {
    val tna = Port[BLESS_Types.flag] (id = portId"0", name = "PG_imp_Instance_pgp_ddd_tna", mode = DataIn)
    val tnv = Port[BLESS_Types.flag] (id = portId"1", name = "PG_imp_Instance_pgp_ddd_tnv", mode = DataIn)
    val last_v_was_vs = Port[BLESS_Types.flag] (id = portId"2", name = "PG_imp_Instance_pgp_ddd_last_v_was_vs", mode = DataOut)
    val min_cci = Port[PACE_Data.ms] (id = portId"3", name = "PG_imp_Instance_pgp_ddd_min_cci", mode = DataIn)
    val max_cci = Port[PACE_Data.ms] (id = portId"4", name = "PG_imp_Instance_pgp_ddd_max_cci", mode = DataIn)
    val atr_max_cci = Port[PACE_Data.ms] (id = portId"5", name = "PG_imp_Instance_pgp_ddd_atr_max_cci", mode = DataIn)
    val dav = Port[PACE_Data.ms] (id = portId"6", name = "PG_imp_Instance_pgp_ddd_dav", mode = DataIn)
    val fb = Port[BLESS_Types.flag] (id = portId"7", name = "PG_imp_Instance_pgp_ddd_fb", mode = DataIn)
    val lrl = Port[PACE_Data.ms] (id = portId"8", name = "PG_imp_Instance_pgp_ddd_lrl", mode = DataIn)
    val url = Port[PACE_Data.ms] (id = portId"9", name = "PG_imp_Instance_pgp_ddd_url", mode = DataIn)
    val av = Port[PACE_Data.ms] (id = portId"10", name = "PG_imp_Instance_pgp_ddd_av", mode = DataIn)
    val savo = Port[PACE_Data.ms] (id = portId"11", name = "PG_imp_Instance_pgp_ddd_savo", mode = DataIn)
    val act = Port[PACE_Data.milliG] (id = portId"12", name = "PG_imp_Instance_pgp_ddd_act", mode = DataIn)
    val vrp = Port[PACE_Data.ms] (id = portId"13", name = "PG_imp_Instance_pgp_ddd_vrp", mode = DataIn)
    val arp = Port[PACE_Data.ms] (id = portId"14", name = "PG_imp_Instance_pgp_ddd_arp", mode = DataIn)
    val pvarp = Port[PACE_Data.ms] (id = portId"15", name = "PG_imp_Instance_pgp_ddd_pvarp", mode = DataIn)
    val ex_pvarp = Port[PACE_Data.ms] (id = portId"16", name = "PG_imp_Instance_pgp_ddd_ex_pvarp", mode = DataIn)
    val hy = Port[PACE_Data.ms] (id = portId"17", name = "PG_imp_Instance_pgp_ddd_hy", mode = DataIn)
    val min_av = Port[PACE_Data.ms] (id = portId"18", name = "PG_imp_Instance_pgp_ddd_min_av", mode = DataIn)
    val pv = Port[BLESS_Types.flag] (id = portId"19", name = "PG_imp_Instance_pgp_ddd_pv", mode = DataIn)
    val sv = Port[BLESS_Types.flag] (id = portId"20", name = "PG_imp_Instance_pgp_ddd_sv", mode = DataIn)
    val pa = Port[BLESS_Types.flag] (id = portId"21", name = "PG_imp_Instance_pgp_ddd_pa", mode = DataIn)
    val sa = Port[BLESS_Types.flag] (id = portId"22", name = "PG_imp_Instance_pgp_ddd_sa", mode = DataIn)
    val inhibit = Port[BLESS_Types.flag] (id = portId"23", name = "PG_imp_Instance_pgp_ddd_inhibit", mode = DataIn)
    val track = Port[BLESS_Types.flag] (id = portId"24", name = "PG_imp_Instance_pgp_ddd_track", mode = DataIn)
    val cci = Port[PACE_Data.ms] (id = portId"25", name = "PG_imp_Instance_pgp_ddd_cci", mode = EventOut)
    val a = Port[art.Empty] (id = portId"26", name = "PG_imp_Instance_pgp_ddd_a", mode = EventIn)
    val v = Port[art.Empty] (id = portId"27", name = "PG_imp_Instance_pgp_ddd_v", mode = EventIn)
    val ap = Port[art.Empty] (id = portId"28", name = "PG_imp_Instance_pgp_ddd_ap", mode = EventOut)
    val vp = Port[art.Empty] (id = portId"29", name = "PG_imp_Instance_pgp_ddd_vp", mode = EventOut)
    val as = Port[art.Empty] (id = portId"30", name = "PG_imp_Instance_pgp_ddd_as", mode = EventOut)
    val at = Port[art.Empty] (id = portId"31", name = "PG_imp_Instance_pgp_ddd_at", mode = EventOut)
    val vs = Port[art.Empty] (id = portId"32", name = "PG_imp_Instance_pgp_ddd_vs", mode = EventOut)
    val pvc = Port[art.Empty] (id = portId"33", name = "PG_imp_Instance_pgp_ddd_pvc", mode = EventOut)
    val ras = Port[art.Empty] (id = portId"34", name = "PG_imp_Instance_pgp_ddd_ras", mode = EventOut)
    val rvs = Port[art.Empty] (id = portId"35", name = "PG_imp_Instance_pgp_ddd_rvs", mode = EventOut)

    bless.sw.pacer_imp_pgp_ddd_Bridge(
      id = bridgeId"0",
      name = "PG_imp_Instance_pgp_ddd",
      dispatchProtocol = Sporadic(min = 1),
      dispatchTriggers = None(),

      tna = tna,
      tnv = tnv,
      last_v_was_vs = last_v_was_vs,
      min_cci = min_cci,
      max_cci = max_cci,
      atr_max_cci = atr_max_cci,
      dav = dav,
      fb = fb,
      lrl = lrl,
      url = url,
      av = av,
      savo = savo,
      act = act,
      vrp = vrp,
      arp = arp,
      pvarp = pvarp,
      ex_pvarp = ex_pvarp,
      hy = hy,
      min_av = min_av,
      pv = pv,
      sv = sv,
      pa = pa,
      sa = sa,
      inhibit = inhibit,
      track = track,
      cci = cci,
      a = a,
      v = v,
      ap = ap,
      vp = vp,
      as = as,
      at = at,
      vs = vs,
      pvc = pvc,
      ras = ras,
      rvs = rvs
    )
  }
  val PG_imp_Instance_pgp_rc : bless.rc.RateController_normal_pgp_rc_Bridge = {
    val min_cci = Port[PACE_Data.ms] (id = portId"36", name = "PG_imp_Instance_pgp_rc_min_cci", mode = DataOut)
    val max_cci = Port[PACE_Data.ms] (id = portId"37", name = "PG_imp_Instance_pgp_rc_max_cci", mode = DataOut)
    val atr_max_cci = Port[PACE_Data.ms] (id = portId"38", name = "PG_imp_Instance_pgp_rc_atr_max_cci", mode = DataOut)
    val dav = Port[PACE_Data.ms] (id = portId"39", name = "PG_imp_Instance_pgp_rc_dav", mode = DataOut)
    val xl = Port[PACE_Data.milliG] (id = portId"40", name = "PG_imp_Instance_pgp_rc_xl", mode = DataIn)
    val mag = Port[BLESS_Types.flag] (id = portId"41", name = "PG_imp_Instance_pgp_rc_mag", mode = DataIn)
    val last_v_was_vs = Port[BLESS_Types.flag] (id = portId"42", name = "PG_imp_Instance_pgp_rc_last_v_was_vs", mode = DataIn)
    val rr = Port[BLESS_Types.flag] (id = portId"43", name = "PG_imp_Instance_pgp_rc_rr", mode = DataIn)
    val rf = Port[PACE_Data.rf] (id = portId"44", name = "PG_imp_Instance_pgp_rc_rf", mode = DataIn)
    val rt = Port[PACE_Data.second] (id = portId"45", name = "PG_imp_Instance_pgp_rc_rt", mode = DataIn)
    val at = Port[PACE_Data.milliG] (id = portId"46", name = "PG_imp_Instance_pgp_rc_at", mode = DataIn)
    val ct = Port[PACE_Data.second] (id = portId"47", name = "PG_imp_Instance_pgp_rc_ct", mode = DataIn)
    val lrl = Port[PACE_Data.ms] (id = portId"48", name = "PG_imp_Instance_pgp_rc_lrl", mode = DataIn)
    val url = Port[PACE_Data.ms] (id = portId"49", name = "PG_imp_Instance_pgp_rc_url", mode = DataIn)
    val msr = Port[PACE_Data.ms] (id = portId"50", name = "PG_imp_Instance_pgp_rc_msr", mode = DataIn)
    val av = Port[PACE_Data.ms] (id = portId"51", name = "PG_imp_Instance_pgp_rc_av", mode = DataIn)
    val min_av = Port[PACE_Data.ms] (id = portId"52", name = "PG_imp_Instance_pgp_rc_min_av", mode = DataIn)
    val drs = Port[PACE_Data.percent] (id = portId"53", name = "PG_imp_Instance_pgp_rc_drs", mode = DataIn)
    val urs = Port[PACE_Data.percent] (id = portId"54", name = "PG_imp_Instance_pgp_rc_urs", mode = DataIn)
    val fb_time = Port[PACE_Data.second] (id = portId"55", name = "PG_imp_Instance_pgp_rc_fb_time", mode = DataIn)
    val hy = Port[PACE_Data.ms] (id = portId"56", name = "PG_imp_Instance_pgp_rc_hy", mode = DataIn)
    val cci = Port[PACE_Data.ms] (id = portId"57", name = "PG_imp_Instance_pgp_rc_cci", mode = EventIn)

    bless.rc.RateController_normal_pgp_rc_Bridge(
      id = bridgeId"1",
      name = "PG_imp_Instance_pgp_rc",
      dispatchProtocol = Sporadic(min = 1),
      dispatchTriggers = None(),

      min_cci = min_cci,
      max_cci = max_cci,
      atr_max_cci = atr_max_cci,
      dav = dav,
      xl = xl,
      mag = mag,
      last_v_was_vs = last_v_was_vs,
      rr = rr,
      rf = rf,
      rt = rt,
      at = at,
      ct = ct,
      lrl = lrl,
      url = url,
      msr = msr,
      av = av,
      min_av = min_av,
      drs = drs,
      urs = urs,
      fb_time = fb_time,
      hy = hy,
      cci = cci
    )
  }
  val PG_imp_Instance_pgp_mkr : bless.mark.Markers_imp_pgp_mkr_Bridge = {
    val tna = Port[BLESS_Types.flag] (id = portId"58", name = "PG_imp_Instance_pgp_mkr_tna", mode = DataIn)
    val tnv = Port[BLESS_Types.flag] (id = portId"59", name = "PG_imp_Instance_pgp_mkr_tnv", mode = DataIn)
    val cci = Port[PACE_Data.ms] (id = portId"60", name = "PG_imp_Instance_pgp_mkr_cci", mode = DataIn)
    val mark_A = Port[mark.AtrialMarker] (id = portId"61", name = "PG_imp_Instance_pgp_mkr_mark_A", mode = EventOut)
    val mark_V = Port[mark.VentricularlMarker] (id = portId"62", name = "PG_imp_Instance_pgp_mkr_mark_V", mode = EventOut)
    val mark_X = Port[mark.ExtraordinaryMarker] (id = portId"63", name = "PG_imp_Instance_pgp_mkr_mark_X", mode = EventOut)
    val atr_dct = Port[BLESS_Types.flag] (id = portId"64", name = "PG_imp_Instance_pgp_mkr_atr_dct", mode = EventIn)
    val atr_end = Port[BLESS_Types.flag] (id = portId"65", name = "PG_imp_Instance_pgp_mkr_atr_end", mode = EventIn)
    val ap = Port[art.Empty] (id = portId"66", name = "PG_imp_Instance_pgp_mkr_ap", mode = EventIn)
    val vp = Port[art.Empty] (id = portId"67", name = "PG_imp_Instance_pgp_mkr_vp", mode = EventIn)
    val as = Port[art.Empty] (id = portId"68", name = "PG_imp_Instance_pgp_mkr_as", mode = EventIn)
    val at = Port[art.Empty] (id = portId"69", name = "PG_imp_Instance_pgp_mkr_at", mode = EventIn)
    val vs = Port[art.Empty] (id = portId"70", name = "PG_imp_Instance_pgp_mkr_vs", mode = EventIn)
    val pvc = Port[art.Empty] (id = portId"71", name = "PG_imp_Instance_pgp_mkr_pvc", mode = EventIn)
    val ras = Port[art.Empty] (id = portId"72", name = "PG_imp_Instance_pgp_mkr_ras", mode = EventIn)
    val rvs = Port[art.Empty] (id = portId"73", name = "PG_imp_Instance_pgp_mkr_rvs", mode = EventIn)
    val atr_fb = Port[art.Empty] (id = portId"74", name = "PG_imp_Instance_pgp_mkr_atr_fb", mode = EventIn)

    bless.mark.Markers_imp_pgp_mkr_Bridge(
      id = bridgeId"2",
      name = "PG_imp_Instance_pgp_mkr",
      dispatchProtocol = Sporadic(min = 1),
      dispatchTriggers = None(),

      tna = tna,
      tnv = tnv,
      cci = cci,
      mark_A = mark_A,
      mark_V = mark_V,
      mark_X = mark_X,
      atr_dct = atr_dct,
      atr_end = atr_end,
      ap = ap,
      vp = vp,
      as = as,
      at = at,
      vs = vs,
      pvc = pvc,
      ras = ras,
      rvs = rvs,
      atr_fb = atr_fb
    )
  }
  val PG_imp_Instance_pgp_stg : bless.Rx.Settings_imp_pgp_stg_Bridge = {
    val lrl = Port[PACE_Data.ms] (id = portId"75", name = "PG_imp_Instance_pgp_stg_lrl", mode = DataOut)
    val url = Port[PACE_Data.ms] (id = portId"76", name = "PG_imp_Instance_pgp_stg_url", mode = DataOut)
    val av = Port[PACE_Data.ms] (id = portId"77", name = "PG_imp_Instance_pgp_stg_av", mode = DataOut)
    val savo = Port[PACE_Data.ms] (id = portId"78", name = "PG_imp_Instance_pgp_stg_savo", mode = DataOut)
    val act = Port[PACE_Data.milliG] (id = portId"79", name = "PG_imp_Instance_pgp_stg_act", mode = DataOut)
    val vrp = Port[PACE_Data.ms] (id = portId"80", name = "PG_imp_Instance_pgp_stg_vrp", mode = DataOut)
    val arp = Port[PACE_Data.ms] (id = portId"81", name = "PG_imp_Instance_pgp_stg_arp", mode = DataOut)
    val pvarp = Port[PACE_Data.ms] (id = portId"82", name = "PG_imp_Instance_pgp_stg_pvarp", mode = DataOut)
    val pv = Port[BLESS_Types.flag] (id = portId"83", name = "PG_imp_Instance_pgp_stg_pv", mode = DataOut)
    val sv = Port[BLESS_Types.flag] (id = portId"84", name = "PG_imp_Instance_pgp_stg_sv", mode = DataOut)
    val pa = Port[BLESS_Types.flag] (id = portId"85", name = "PG_imp_Instance_pgp_stg_pa", mode = DataOut)
    val sa = Port[BLESS_Types.flag] (id = portId"86", name = "PG_imp_Instance_pgp_stg_sa", mode = DataOut)
    val inhibit = Port[BLESS_Types.flag] (id = portId"87", name = "PG_imp_Instance_pgp_stg_inhibit", mode = DataOut)
    val track = Port[BLESS_Types.flag] (id = portId"88", name = "PG_imp_Instance_pgp_stg_track", mode = DataOut)
    val hy = Port[PACE_Data.ms] (id = portId"89", name = "PG_imp_Instance_pgp_stg_hy", mode = DataOut)
    val rr = Port[BLESS_Types.flag] (id = portId"90", name = "PG_imp_Instance_pgp_stg_rr", mode = DataOut)
    val rf = Port[PACE_Data.rf] (id = portId"91", name = "PG_imp_Instance_pgp_stg_rf", mode = DataOut)
    val msr = Port[PACE_Data.ms] (id = portId"92", name = "PG_imp_Instance_pgp_stg_msr", mode = DataOut)
    val min_av = Port[PACE_Data.ms] (id = portId"93", name = "PG_imp_Instance_pgp_stg_min_av", mode = DataOut)
    val ex_pvarp = Port[PACE_Data.ms] (id = portId"94", name = "PG_imp_Instance_pgp_stg_ex_pvarp", mode = DataOut)
    val rt = Port[PACE_Data.second] (id = portId"95", name = "PG_imp_Instance_pgp_stg_rt", mode = DataOut)
    val ct = Port[PACE_Data.second] (id = portId"96", name = "PG_imp_Instance_pgp_stg_ct", mode = DataOut)
    val atr_enable = Port[BLESS_Types.flag] (id = portId"97", name = "PG_imp_Instance_pgp_stg_atr_enable", mode = DataOut)
    val atr_duration = Port[PACE_Data.CCcount] (id = portId"98", name = "PG_imp_Instance_pgp_stg_atr_duration", mode = DataOut)
    val fb_time = Port[PACE_Data.second] (id = portId"99", name = "PG_imp_Instance_pgp_stg_fb_time", mode = DataOut)
    val drs = Port[PACE_Data.percent] (id = portId"100", name = "PG_imp_Instance_pgp_stg_drs", mode = DataOut)
    val urs = Port[PACE_Data.percent] (id = portId"101", name = "PG_imp_Instance_pgp_stg_urs", mode = DataOut)
    val settings = Port[PACE_Data.Rx] (id = portId"102", name = "PG_imp_Instance_pgp_stg_settings", mode = EventIn)

    bless.Rx.Settings_imp_pgp_stg_Bridge(
      id = bridgeId"3",
      name = "PG_imp_Instance_pgp_stg",
      dispatchProtocol = Sporadic(min = 1),
      dispatchTriggers = None(),

      lrl = lrl,
      url = url,
      av = av,
      savo = savo,
      act = act,
      vrp = vrp,
      arp = arp,
      pvarp = pvarp,
      pv = pv,
      sv = sv,
      pa = pa,
      sa = sa,
      inhibit = inhibit,
      track = track,
      hy = hy,
      rr = rr,
      rf = rf,
      msr = msr,
      min_av = min_av,
      ex_pvarp = ex_pvarp,
      rt = rt,
      ct = ct,
      atr_enable = atr_enable,
      atr_duration = atr_duration,
      fb_time = fb_time,
      drs = drs,
      urs = urs,
      settings = settings
    )
  }

  val ad : ArchitectureDescription = {

    ArchitectureDescription(
      components = IS[Art.BridgeId, Bridge] (PG_imp_Instance_pgp_ddd, PG_imp_Instance_pgp_rc, PG_imp_Instance_pgp_mkr, PG_imp_Instance_pgp_stg),

      connections = IS[Art.ConnectionId, UConnection] (Connection(from = PG_imp_Instance_pgp_ddd.last_v_was_vs, to = PG_imp_Instance_pgp_rc.last_v_was_vs),
                                                       Connection(from = PG_imp_Instance_pgp_ddd.cci, to = PG_imp_Instance_pgp_rc.cci),
                                                       Connection(from = PG_imp_Instance_pgp_ddd.cci, to = PG_imp_Instance_pgp_mkr.cci),
                                                       Connection(from = PG_imp_Instance_pgp_ddd.ap, to = PG_imp_Instance_pgp_mkr.ap),
                                                       Connection(from = PG_imp_Instance_pgp_ddd.vp, to = PG_imp_Instance_pgp_mkr.vp),
                                                       Connection(from = PG_imp_Instance_pgp_ddd.as, to = PG_imp_Instance_pgp_mkr.as),
                                                       Connection(from = PG_imp_Instance_pgp_ddd.at, to = PG_imp_Instance_pgp_mkr.at),
                                                       Connection(from = PG_imp_Instance_pgp_ddd.vs, to = PG_imp_Instance_pgp_mkr.vs),
                                                       Connection(from = PG_imp_Instance_pgp_ddd.pvc, to = PG_imp_Instance_pgp_mkr.pvc),
                                                       Connection(from = PG_imp_Instance_pgp_ddd.ras, to = PG_imp_Instance_pgp_mkr.ras),
                                                       Connection(from = PG_imp_Instance_pgp_ddd.rvs, to = PG_imp_Instance_pgp_mkr.rvs),
                                                       Connection(from = PG_imp_Instance_pgp_rc.min_cci, to = PG_imp_Instance_pgp_ddd.min_cci),
                                                       Connection(from = PG_imp_Instance_pgp_rc.max_cci, to = PG_imp_Instance_pgp_ddd.max_cci),
                                                       Connection(from = PG_imp_Instance_pgp_rc.dav, to = PG_imp_Instance_pgp_ddd.dav),
                                                       Connection(from = PG_imp_Instance_pgp_stg.lrl, to = PG_imp_Instance_pgp_ddd.lrl),
                                                       Connection(from = PG_imp_Instance_pgp_stg.lrl, to = PG_imp_Instance_pgp_rc.lrl),
                                                       Connection(from = PG_imp_Instance_pgp_stg.url, to = PG_imp_Instance_pgp_ddd.url),
                                                       Connection(from = PG_imp_Instance_pgp_stg.url, to = PG_imp_Instance_pgp_rc.url),
                                                       Connection(from = PG_imp_Instance_pgp_stg.av, to = PG_imp_Instance_pgp_ddd.av),
                                                       Connection(from = PG_imp_Instance_pgp_stg.av, to = PG_imp_Instance_pgp_rc.av),
                                                       Connection(from = PG_imp_Instance_pgp_stg.savo, to = PG_imp_Instance_pgp_ddd.savo),
                                                       Connection(from = PG_imp_Instance_pgp_stg.act, to = PG_imp_Instance_pgp_ddd.act),
                                                       Connection(from = PG_imp_Instance_pgp_stg.act, to = PG_imp_Instance_pgp_rc.at),
                                                       Connection(from = PG_imp_Instance_pgp_stg.vrp, to = PG_imp_Instance_pgp_ddd.vrp),
                                                       Connection(from = PG_imp_Instance_pgp_stg.arp, to = PG_imp_Instance_pgp_ddd.arp),
                                                       Connection(from = PG_imp_Instance_pgp_stg.pvarp, to = PG_imp_Instance_pgp_ddd.pvarp),
                                                       Connection(from = PG_imp_Instance_pgp_stg.pv, to = PG_imp_Instance_pgp_ddd.pv),
                                                       Connection(from = PG_imp_Instance_pgp_stg.sv, to = PG_imp_Instance_pgp_ddd.sv),
                                                       Connection(from = PG_imp_Instance_pgp_stg.pa, to = PG_imp_Instance_pgp_ddd.pa),
                                                       Connection(from = PG_imp_Instance_pgp_stg.sa, to = PG_imp_Instance_pgp_ddd.sa),
                                                       Connection(from = PG_imp_Instance_pgp_stg.inhibit, to = PG_imp_Instance_pgp_ddd.inhibit),
                                                       Connection(from = PG_imp_Instance_pgp_stg.track, to = PG_imp_Instance_pgp_ddd.track),
                                                       Connection(from = PG_imp_Instance_pgp_stg.hy, to = PG_imp_Instance_pgp_ddd.hy),
                                                       Connection(from = PG_imp_Instance_pgp_stg.hy, to = PG_imp_Instance_pgp_rc.hy),
                                                       Connection(from = PG_imp_Instance_pgp_stg.rr, to = PG_imp_Instance_pgp_rc.rr),
                                                       Connection(from = PG_imp_Instance_pgp_stg.rf, to = PG_imp_Instance_pgp_rc.rf),
                                                       Connection(from = PG_imp_Instance_pgp_stg.msr, to = PG_imp_Instance_pgp_rc.msr),
                                                       Connection(from = PG_imp_Instance_pgp_stg.min_av, to = PG_imp_Instance_pgp_ddd.min_av),
                                                       Connection(from = PG_imp_Instance_pgp_stg.min_av, to = PG_imp_Instance_pgp_rc.min_av),
                                                       Connection(from = PG_imp_Instance_pgp_stg.ex_pvarp, to = PG_imp_Instance_pgp_ddd.ex_pvarp),
                                                       Connection(from = PG_imp_Instance_pgp_stg.rt, to = PG_imp_Instance_pgp_rc.rt),
                                                       Connection(from = PG_imp_Instance_pgp_stg.ct, to = PG_imp_Instance_pgp_rc.ct),
                                                       Connection(from = PG_imp_Instance_pgp_stg.drs, to = PG_imp_Instance_pgp_rc.drs),
                                                       Connection(from = PG_imp_Instance_pgp_stg.urs, to = PG_imp_Instance_pgp_rc.urs))
    )
  }
}
