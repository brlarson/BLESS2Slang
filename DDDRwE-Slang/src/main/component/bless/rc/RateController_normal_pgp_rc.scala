// #Sireum

// generated by BLESS v3.2.1 at Tue Nov 14 03:54:35 CST 2023 from rc::RateController.normal

package bless.rc

import org.sireum._
import org.sireum.S64._  //type for native time (in ms) and integers
import org.sireum.F64._  //type for quantities
import art.Art           // for .time() timestamp
import bless._
// import types created for data components
import bless.PACE_Data.rf
import bless.PACE_Data.percent
import bless.PACE_Data.Rx
import bless.mark.AtrialMarker
import bless.PACE_Data.ms
import bless.mark.ExtraordinaryMarker
import bless.PACE_Data.CCcount
import bless.PACE_Data.milliG
import bless.PACE_Data.second
import bless.BLESS_Types.flag
import bless.mark.VentricularlMarker

object RateController_normal_pgp_rc 
  {
  @enum object CompleteStates 
    {
    "first_rate_state" //initial state
    "wait_state" 
    }
  //  execution states: check_zero_division_state
  //  final states: err_state done_state

  var currentState: CompleteStates.Type = CompleteStates.first_rate_state

  var dur_met: F64 = f64"0.0"
  var dispatch_status: Set[art.Art.PortId] = Set.empty  //local copy of Dispatch_Status

  def Initialize_Entrypoint(api: RateController_normal_Initialization_Api): Unit = 
    {
    api.logDebug("executing Initialize_Entrypoint of RateController_normal_pgp_rc")
    if ( true )
      { do_RC0_init_first_rate(api) }
    //  set durations of timeouts in Bridge
    }  //end of Initialize_Entrypoint

  def Compute_Entrypoint(api: RateController_normal_Operational_Api, Dispatch_Status: Set[art.Art.PortId]): B = 
    {
    dispatch_status = Dispatch_Status  // save local copy of dispatch status
    api.logDebug("executing Compute_Entrypoint of RateController_normal_pgp_rc")
    api.logDebug(s"Dispatch_Status = ${dispatch_status.elements}")
    api.logDebug(s"current complete state = ${currentState}")
    var retval : B = F
    currentState match
      {
      case RateController_normal_pgp_rc.CompleteStates.first_rate_state =>
        if ( true )
          { //initial state case needed for complete match
            retval = T }
      case RateController_normal_pgp_rc.CompleteStates.wait_state =>
        if ( dispatch_status.contains(api.cci_Id) )
          { do_RC1_cci_wait(api)
            retval = T }
      }
    return retval
    }  //end of Compute_Entrypoint

  def Finalize_Entrypoint(api: RateController_normal_Operational_Api): Unit = 
    {
    }  //end of Finalize_Entrypoint

  // methods for transitions leaving initial state  
  def do_RC0_init_first_rate(api: RateController_normal_Initialization_Api): Unit = 
    {
    api.logDebug("executing RC0_init")

    api.put_min_cci(ms(f64"500"))
    api.put_max_cci(ms(f64"1000"))
    api.put_atr_max_cci(ms(f64"1000"))
    api.put_dav(ms(f64"150"))
    //set currentState to destination complete state wait
    currentState = RateController_normal_pgp_rc.CompleteStates.wait_state
    }  //end of do_RC0_init_first_rate

  // methods for transitions leaving complete states  
  def do_RC1_cci_wait(api: RateController_normal_Operational_Api): Unit = 
    {
    api.logDebug("executing RC1_cci")

    //no action
    //the destination is execution state check_zero_division
    executionState_check_zero_division(api)
    }  //end of do_RC1_cci_wait

  // methods for execution states
  def executionState_check_zero_division(api: RateController_normal_Operational_Api): Unit = 
    {
    if ( (((f64"2.0"*(api.get_rt().get.s-api.get_lrl().get.ms)) == f64"0.0")) | 
    (((f64"2.0"*(api.get_ct().get.s-api.get_lrl().get.ms)) == f64"0.0")) | 
    (((api.get_lrl().get.ms-api.get_url().get.ms) == f64"0.0")) )
      { do_RC2_zero_check_zero_division(api) }
    else if ( (((f64"2.0"*(api.get_rt().get.s-api.get_lrl().get.ms)) != f64"0.0")) & 
    (((f64"2.0"*(api.get_ct().get.s-api.get_lrl().get.ms)) != f64"0.0")) & 
    (((api.get_lrl().get.ms-api.get_url().get.ms) != f64"0.0")) )
      { do_RC3_nonzero_check_zero_division(api) }
    }  //end of executionState_check_zero_division

  def do_RC2_zero_check_zero_division(api: RateController_normal_Operational_Api): Unit = 
    {
    api.logDebug("executing do_RC2_zero_check_zero_division")

    Finalize_Entrypoint(api)  //destination is final state err
    }  //end of do_RC2_zero_check_zero_division

  def do_RC3_nonzero_check_zero_division(api: RateController_normal_Operational_Api): Unit = 
    {
    api.logDebug("executing do_RC3_nonzero_check_zero_division")

      {
      var siri : F64 = (if ((api.get_msr().get.ms >= (api.get_lrl().get.ms-(api.get_rf().get.rf*(api.get_xl().get.milliG-api.get_at().get.milliG))))) api.get_msr().get.ms 
        else api.get_lrl().get.ms-(api.get_rf().get.rf*(api.get_xl().get.milliG-api.get_at().get.milliG)))
      var z : F64 = ((api.get_lrl().get.ms-api.get_msr().get.ms)*(api.get_lrl().get.ms+api.get_msr().get.ms))/(f64"2.0"*(api.get_rt().get.s-api.get_lrl().get.ms))
      var y : F64 = ((api.get_lrl().get.ms-api.get_msr().get.ms)*(api.get_lrl().get.ms+api.get_msr().get.ms))/(f64"2.0"*(api.get_ct().get.s-api.get_lrl().get.ms))
      var up_siri : F64 = (if (((api.get_cci().get.ms-z) <= siri)) siri 
        else api.get_cci().get.ms-z)
      var dn_siri : F64 = (if (((api.get_cci().get.ms+y) <= siri)) api.get_cci().get.ms+y 
        else siri)
      var down : F64 = api.get_cci().get.ms*(f64"1.0"+(api.get_drs().get.scalar/f64"100.0"))
      var up : F64 = api.get_cci().get.ms*(f64"1.0"-(api.get_urs().get.scalar/f64"100.0"))
      var hylrl : F64 = (if (api.get_last_v_was_vs().get.value) api.get_lrl().get.ms+api.get_hy().get.ms 
        else api.get_lrl().get.ms)
      api.put_dav(ms((api.get_cci().get.ms*((api.get_av().get.ms-api.get_min_av().get.ms)/
      (api.get_lrl().get.ms-api.get_url().get.ms)))+api.get_min_av().get.ms))
      if ( ((up_siri >= api.get_url().get.ms)) & ((up_siri >= up)) )
        { api.put_min_cci(ms(up_siri)) }
      if ( ((api.get_url().get.ms >= up_siri)) & ((api.get_url().get.ms >= up)) )
        { api.put_min_cci(ms(api.get_url().get.ms)) }
      if ( ((up >= api.get_url().get.ms)) & ((up >= up_siri)) )
        { api.put_min_cci(ms(up)) }
      if ( ((dn_siri <= hylrl)) & ((dn_siri <= down)) )
        { api.put_max_cci(ms(dn_siri)) }
      if ( ((hylrl <= dn_siri)) & ((hylrl <= down)) )
        { api.put_max_cci(ms(hylrl)) }
      if ( ((down <= hylrl)) & ((down <= dn_siri)) )
        { api.put_max_cci(ms(down)) }
      }
    currentState = RateController_normal_pgp_rc.CompleteStates.wait_state  //destination is complete state wait
    }  //end of do_RC3_nonzero_check_zero_division

  def contains(isz : ISZ[Art.PortId], elt : Art.PortId) : B =
    { for ( i <- isz )
      { if (i == elt) { return T } }
    return F
    }
  }

